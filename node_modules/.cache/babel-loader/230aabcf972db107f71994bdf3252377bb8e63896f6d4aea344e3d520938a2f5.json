{"ast":null,"code":"var _jsxFileName = \"/home/ihsanamk/Desktop/proj/port/src/containers/home/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './styles.scss';\nimport logo from '../../assets/images/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const lines = [\"LEET'S CONNECT         \", \" I'm Ihsana          \"]; // Array for multiline text\n  const [displayedText, setDisplayedText] = useState([\"\", \"\"]); // Text that will be typed out, one array item per line\n  const [currentLine, setCurrentLine] = useState(0); // Track which line is being typed\n  const speed = 100; // Speed of typewriting effect\n  const pauseBetweenLines = 1000; // Pause before moving to next line\n\n  useEffect(() => {\n    let index = 0;\n    let interval;\n    const typeLine = lineIndex => {\n      interval = setInterval(() => {\n        if (index < 15) {\n          setDisplayedText(prevText => {\n            const newText = [...prevText];\n            newText[lineIndex] = newText[lineIndex] + lines[lineIndex][index];\n            return newText;\n          });\n          index += 1;\n        } else {\n          clearInterval(interval);\n          if (lineIndex < lines.length - 1) {\n            setTimeout(() => {\n              setCurrentLine(lineIndex + 1); // Move to the next line\n              index = 0; // Reset the index for the next line\n            }, pauseBetweenLines);\n          }\n        }\n      }, speed);\n    };\n    typeLine(currentLine);\n    return () => clearInterval(interval); // Cleanup interval on component unmount\n  }, [currentLine]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text first-text\",\n        children: displayedText[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text sec-text\",\n        children: displayedText[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-image1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"image1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"oOQ4wtmafURkfT4uE+Wl/JvHGmU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","logo","jsxDEV","_jsxDEV","Home","_s","lines","displayedText","setDisplayedText","currentLine","setCurrentLine","speed","pauseBetweenLines","index","interval","typeLine","lineIndex","setInterval","prevText","newText","clearInterval","length","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/home/ihsanamk/Desktop/proj/port/src/containers/home/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './styles.scss';\nimport logo from '../../assets/images/logo.png';\n\nconst Home = () => {\n  const lines = [\"LEET'S CONNECT         \", \" I'm Ihsana          \"]; // Array for multiline text\n  const [displayedText, setDisplayedText] = useState([\"\", \"\"]); // Text that will be typed out, one array item per line\n  const [currentLine, setCurrentLine] = useState(0); // Track which line is being typed\n  const speed = 100; // Speed of typewriting effect\n  const pauseBetweenLines = 1000; // Pause before moving to next line\n\n  useEffect(() => {\n    let index = 0;\n    let interval;\n\n    const typeLine = (lineIndex) => {\n\n      \n      interval = setInterval(() => {\n        if (index < 15) {\n          setDisplayedText((prevText) => {\n            const newText = [...prevText];\n            newText[lineIndex] = newText[lineIndex] + lines[lineIndex][index];\n            return newText;\n          });\n          index += 1;\n        } else {\n          clearInterval(interval);\n          if (lineIndex < lines.length - 1) {\n            setTimeout(() => {\n              setCurrentLine(lineIndex + 1); // Move to the next line\n              index = 0; // Reset the index for the next line\n            }, pauseBetweenLines);\n          }\n        }\n      }, speed);\n    };\n\n    typeLine(currentLine);\n\n    return () => clearInterval(interval); // Cleanup interval on component unmount\n  }, [currentLine]);\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"container\">\n        <span className=\"text first-text\">{displayedText[0]}</span>\n        <span className=\"text sec-text\">{displayedText[1]}</span>\n      </div>\n      <div className=\"home-image1\">\n        <img src={logo} alt=\"image1\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,KAAK,GAAG,CAAC,yBAAyB,EAAE,uBAAuB,CAAC,CAAC,CAAC;EACpE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,MAAMY,KAAK,GAAG,GAAG,CAAC,CAAC;EACnB,MAAMC,iBAAiB,GAAG,IAAI,CAAC,CAAC;;EAEhCZ,SAAS,CAAC,MAAM;IACd,IAAIa,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ;IAEZ,MAAMC,QAAQ,GAAIC,SAAS,IAAK;MAG9BF,QAAQ,GAAGG,WAAW,CAAC,MAAM;QAC3B,IAAIJ,KAAK,GAAG,EAAE,EAAE;UACdL,gBAAgB,CAAEU,QAAQ,IAAK;YAC7B,MAAMC,OAAO,GAAG,CAAC,GAAGD,QAAQ,CAAC;YAC7BC,OAAO,CAACH,SAAS,CAAC,GAAGG,OAAO,CAACH,SAAS,CAAC,GAAGV,KAAK,CAACU,SAAS,CAAC,CAACH,KAAK,CAAC;YACjE,OAAOM,OAAO;UAChB,CAAC,CAAC;UACFN,KAAK,IAAI,CAAC;QACZ,CAAC,MAAM;UACLO,aAAa,CAACN,QAAQ,CAAC;UACvB,IAAIE,SAAS,GAAGV,KAAK,CAACe,MAAM,GAAG,CAAC,EAAE;YAChCC,UAAU,CAAC,MAAM;cACfZ,cAAc,CAACM,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;cAC/BH,KAAK,GAAG,CAAC,CAAC,CAAC;YACb,CAAC,EAAED,iBAAiB,CAAC;UACvB;QACF;MACF,CAAC,EAAED,KAAK,CAAC;IACX,CAAC;IAEDI,QAAQ,CAACN,WAAW,CAAC;IAErB,OAAO,MAAMW,aAAa,CAACN,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjB,oBACEN,OAAA;IAAKoB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BrB,OAAA;MAAKoB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBrB,OAAA;QAAMoB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAEjB,aAAa,CAAC,CAAC;MAAC;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3DzB,OAAA;QAAMoB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEjB,aAAa,CAAC,CAAC;MAAC;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACNzB,OAAA;MAAKoB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BrB,OAAA;QAAK0B,GAAG,EAAE5B,IAAK;QAAC6B,GAAG,EAAC;MAAQ;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvB,EAAA,CAlDID,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAoDV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}